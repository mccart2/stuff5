
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000799  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006cb  00000000  00000000  00000995  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002be  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  00001320  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c5  00000000  00000000  0000139c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000122  00000000  00000000  00001761  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001883  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_14>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_15>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  78:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <timer_not_slimer>:


void timer_not_slimer() // Function for our timer
{
	
	sei();//Enables Interrupts
  80:	78 94       	sei
	
	OCR0B = 0xD7;//How long the the LED will be on for 
  82:	87 ed       	ldi	r24, 0xD7	; 215
  84:	88 bd       	out	0x28, r24	; 40
	
	OCR0A = 0x91;// How long the LED  will be off for
  86:	81 e9       	ldi	r24, 0x91	; 145
  88:	87 bd       	out	0x27, r24	; 39
	TCCR0B |= (1 << WGM02)|(1 << CS02)|(1 << CS00);// Pre-scaler set to 1024 and CTC mode enabled
  8a:	85 b5       	in	r24, 0x25	; 37
  8c:	8d 60       	ori	r24, 0x0D	; 13
  8e:	85 bd       	out	0x25, r24	; 37
	
	TIMSK0 |= (1 << OCIE1A)|(1 << OCIE1B);//Turns on Enable Compare Interrupt Mode
  90:	ee e6       	ldi	r30, 0x6E	; 110
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	86 60       	ori	r24, 0x06	; 6
  98:	80 83       	st	Z, r24
  9a:	08 95       	ret

0000009c <main>:



int main(void)
{
	DDRB |= (1 << 1);//Enables Port B pin 1 as output
  9c:	21 9a       	sbi	0x04, 1	; 4
	
	timer_not_slimer();// Calls our Timer Function
  9e:	0e 94 40 00 	call	0x80	; 0x80 <timer_not_slimer>
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <main+0x6>

000000a4 <__vector_14>:




ISR (TIMER0_COMPA_vect) // Function for turning timer on
{
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	8f 93       	push	r24
  b0:	9f 93       	push	r25
	PORTB = 0x01; //Turns LED on by setting the Port High
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	85 ef       	ldi	r24, 0xF5	; 245
  b8:	91 ed       	ldi	r25, 0xD1	; 209
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <__vector_14+0x16>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <__vector_14+0x1c>
  c0:	00 00       	nop
	
	_delay_ms(215);//Call delay for desired time .215 seconds

}
  c2:	9f 91       	pop	r25
  c4:	8f 91       	pop	r24
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <__vector_15>:



ISR (TIMER0_COMPB_vect)// Function for turning timer off
{
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
	PORTB = 0x00; // Turn off LED by setting the Port Low
  de:	15 b8       	out	0x05, r1	; 5
  e0:	89 e9       	ldi	r24, 0x99	; 153
  e2:	9d e8       	ldi	r25, 0x8D	; 141
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <__vector_15+0x14>
  e8:	00 c0       	rjmp	.+0      	; 0xea <__vector_15+0x1a>
  ea:	00 00       	nop
	
	_delay_ms(145);//Call delay for desired time .145 seconds
  ec:	9f 91       	pop	r25
  ee:	8f 91       	pop	r24
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
