
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000106  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ad  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000062b  00000000  00000000  000008a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000262  00000000  00000000  00000ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00001130  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036f  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000053  00000000  00000000  000014df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001532  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_16>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

#include <avr/io.h>
#include <avr/interrupt.h>

int main (void)
{	sei();// Enables interrupts
  80:	78 94       	sei
	
	DDRB = _BV(PINB2); //Pins on Port B are input, except PIN2
  82:	84 e0       	ldi	r24, 0x04	; 4
  84:	84 b9       	out	0x04, r24	; 4
	
	OCR0A = 0xC7;// Sets value we are comparing to
  86:	87 ec       	ldi	r24, 0xC7	; 199
  88:	87 bd       	out	0x27, r24	; 39
	
	TCCR0B = (1<<CS02) | (1<<CS00);//Setting Pre-scaler to 1024
  8a:	85 e0       	ldi	r24, 0x05	; 5
  8c:	85 bd       	out	0x25, r24	; 37

	TIMSK0 = (1<<TOIE0);// Timer/Counter-Interrupt mask register, set to Output Compare Match
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>

	PORTD |= (1 << PORTD2); // Pull up enabled
  94:	5a 9a       	sbi	0x0b, 2	; 11
	
	EICRA |= (1 << ISC00);  // Set INT0 to trigger on any rising edge
  96:	e9 e6       	ldi	r30, 0x69	; 105
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	80 83       	st	Z, r24
	
	EIMSK |= (1 << INT0);   // Turns on both Interrupts
  a0:	e8 9a       	sbi	0x1d, 0	; 29
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <main+0x22>

000000a4 <__vector_16>:
		}
	
}

ISR(TIMER0_OVF_vect)// Our Interrupt Timer 0
{
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
		int interrupt_counter = 0;// Sets variable for counting interrupts and initializes to zero
		
		if(PINC & _BV(PINC2)) // if the button is pressed then perform the following events
		
		{
			PORTB = _BV(PINB2);// Loop as long as interrupt counter is less than desired value
  ae:	64 e0       	ldi	r22, 0x04	; 4
			{
				if (TIFR0 & (1 << OCR0A))// Loop condition checking for interrupt flag, and value Compare register
				{
					interrupt_counter +=1;// Increments our interrupt counter
						
						TIFR0 = 0x01;// Resets flag to 1
  b0:	31 e0       	ldi	r19, 0x01	; 1
	
	{
		
		int interrupt_counter = 0;// Sets variable for counting interrupts and initializes to zero
		
		if(PINC & _BV(PINC2)) // if the button is pressed then perform the following events
  b2:	32 9b       	sbis	0x06, 2	; 6
  b4:	24 c0       	rjmp	.+72     	; 0xfe <__vector_16+0x5a>
		
		{
			PORTB = _BV(PINB2);// Loop as long as interrupt counter is less than desired value
  b6:	65 b9       	out	0x05, r22	; 5
			interrupt_counter = 0;// Sets counter to zero
  b8:	40 e0       	ldi	r20, 0x00	; 0
  ba:	50 e0       	ldi	r21, 0x00	; 0
  bc:	15 c0       	rjmp	.+42     	; 0xe8 <__vector_16+0x44>
			while(interrupt_counter < 50 ) // while the clock is less than 1.25 s
			{
				if (TIFR0 & (1 << OCR0A))// Loop condition checking for interrupt flag, and value Compare register
  be:	85 b3       	in	r24, 0x15	; 21
  c0:	27 b5       	in	r18, 0x27	; 39
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <__vector_16+0x26>
  c6:	95 95       	asr	r25
  c8:	87 95       	ror	r24
  ca:	2a 95       	dec	r18
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <__vector_16+0x22>
  ce:	80 fd       	sbrc	r24, 0
  d0:	04 c0       	rjmp	.+8      	; 0xda <__vector_16+0x36>
		if(PINC & _BV(PINC2)) // if the button is pressed then perform the following events
		
		{
			PORTB = _BV(PINB2);// Loop as long as interrupt counter is less than desired value
			interrupt_counter = 0;// Sets counter to zero
			while(interrupt_counter < 50 ) // while the clock is less than 1.25 s
  d2:	42 33       	cpi	r20, 0x32	; 50
  d4:	51 05       	cpc	r21, r1
  d6:	9c f3       	brlt	.-26     	; 0xbe <__vector_16+0x1a>
  d8:	12 c0       	rjmp	.+36     	; 0xfe <__vector_16+0x5a>
			{
				if (TIFR0 & (1 << OCR0A))// Loop condition checking for interrupt flag, and value Compare register
				{
					interrupt_counter +=1;// Increments our interrupt counter
  da:	4f 5f       	subi	r20, 0xFF	; 255
  dc:	5f 4f       	sbci	r21, 0xFF	; 255
						
						TIFR0 = 0x01;// Resets flag to 1
  de:	35 bb       	out	0x15, r19	; 21
						
						TCNT0 = 0x00;//Resets our clock to zero
  e0:	16 bc       	out	0x26, r1	; 38
		if(PINC & _BV(PINC2)) // if the button is pressed then perform the following events
		
		{
			PORTB = _BV(PINB2);// Loop as long as interrupt counter is less than desired value
			interrupt_counter = 0;// Sets counter to zero
			while(interrupt_counter < 50 ) // while the clock is less than 1.25 s
  e2:	42 33       	cpi	r20, 0x32	; 50
  e4:	51 05       	cpc	r21, r1
  e6:	59 f0       	breq	.+22     	; 0xfe <__vector_16+0x5a>
			{
				if (TIFR0 & (1 << OCR0A))// Loop condition checking for interrupt flag, and value Compare register
  e8:	85 b3       	in	r24, 0x15	; 21
  ea:	27 b5       	in	r18, 0x27	; 39
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <__vector_16+0x50>
  f0:	95 95       	asr	r25
  f2:	87 95       	ror	r24
  f4:	2a 95       	dec	r18
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <__vector_16+0x4c>
  f8:	80 ff       	sbrs	r24, 0
  fa:	e1 cf       	rjmp	.-62     	; 0xbe <__vector_16+0x1a>
  fc:	ee cf       	rjmp	.-36     	; 0xda <__vector_16+0x36>
						TCNT0 = 0x00;//Resets our clock to zero
				}
			}

		}
		PORTB = 0x00;// Once the specified amount of time has passed through the timers turn off LED
  fe:	15 b8       	out	0x05, r1	; 5

	}
 100:	d8 cf       	rjmp	.-80     	; 0xb2 <__vector_16+0xe>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
