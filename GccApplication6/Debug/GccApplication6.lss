
GccApplication6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006aa  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  000008fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000252  00000000  00000000  00000f01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001154  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036c  00000000  00000000  00001178  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fb  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000015df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

#include <avr/io.h>

int main (void)
{
	DDRB = 0xFF; //All ports on Port B as output
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4
	
	int flag_high = 0;  //Counter used in loop when LED is in HIGH/ON state
	
	int flag_low = 0;  //Counter used in loop when LED is in LOW/OFF state
		
	OCR0A = 0xDC; // Amount of time/cycles on flag needs to be on
  84:	8c ed       	ldi	r24, 0xDC	; 220
  86:	87 bd       	out	0x27, r24	; 39
	
	OCR0B = 0x96; // Amount of time/cycles on flag needs to be off
  88:	86 e9       	ldi	r24, 0x96	; 150
  8a:	88 bd       	out	0x28, r24	; 40
		
	TCCR0A = (1<<COM0A1)|(1<<COM0B1); //Clear on Compare Match
  8c:	80 ea       	ldi	r24, 0xA0	; 160
  8e:	84 bd       	out	0x24, r24	; 36
	
	TCCR0B = (1<<CS02) | (1<<CS00); //Setting Pre-scaler to 1024
  90:	85 e0       	ldi	r24, 0x05	; 5
  92:	85 bd       	out	0x25, r24	; 37
	
	TIMSK0 = (1 << OCIE0B)| (1 << OCIE0A); // Timer/Counter-Interrupt mask register, set to Output Compare Match 
  94:	86 e0       	ldi	r24, 0x06	; 6
  96:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
	
		if (counter %2 == 0)//Main control if statement for which the LED will be on
	
		{
		
			PORTB = 0x01;//Sets the output of Port B to high
  9e:	51 e0       	ldi	r21, 0x01	; 1
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <main+0x26>
  a2:	2f 5f       	subi	r18, 0xFF	; 255
  a4:	3f 4f       	sbci	r19, 0xFF	; 255
	
	while (1) // Our Repeating loop
	
	{
	
		if (counter %2 == 0)//Main control if statement for which the LED will be on
  a6:	c9 01       	movw	r24, r18
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	80 fd       	sbrc	r24, 0
  ac:	2e c0       	rjmp	.+92     	; 0x10a <main+0x8a>
	
		{
		
			PORTB = 0x01;//Sets the output of Port B to high
  ae:	55 b9       	out	0x05, r21	; 5
		
			while (flag_high<2) // Loop for how long our LED will be on for.
		
			{
			
				if (TIFR0 & (1 << OCR0A)) //Inner loop that cycles until our flag hits given value.
  b0:	85 b3       	in	r24, 0x15	; 21
  b2:	47 b5       	in	r20, 0x27	; 39
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <main+0x3c>
  b8:	95 95       	asr	r25
  ba:	87 95       	ror	r24
  bc:	4a 95       	dec	r20
  be:	e2 f7       	brpl	.-8      	; 0xb8 <main+0x38>
  c0:	80 fd       	sbrc	r24, 0
  c2:	0a c0       	rjmp	.+20     	; 0xd8 <main+0x58>
  c4:	85 b3       	in	r24, 0x15	; 21
  c6:	47 b5       	in	r20, 0x27	; 39
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <main+0x50>
  cc:	95 95       	asr	r25
  ce:	87 95       	ror	r24
  d0:	4a 95       	dec	r20
  d2:	e2 f7       	brpl	.-8      	; 0xcc <main+0x4c>
  d4:	80 ff       	sbrs	r24, 0
  d6:	f6 cf       	rjmp	.-20     	; 0xc4 <main+0x44>
			
				{
			
					flag_high +=1;  
			
					TCNT0 = 0x00; //Resets our counter to zero
  d8:	16 bc       	out	0x26, r1	; 38
			
					TIFR0 = 0x01; // Sets our Interrupt register to 1
  da:	55 bb       	out	0x15, r21	; 21
		
			while (flag_high<2) // Loop for how long our LED will be on for.
		
			{
			
				if (TIFR0 & (1 << OCR0A)) //Inner loop that cycles until our flag hits given value.
  dc:	85 b3       	in	r24, 0x15	; 21
  de:	47 b5       	in	r20, 0x27	; 39
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <main+0x68>
  e4:	95 95       	asr	r25
  e6:	87 95       	ror	r24
  e8:	4a 95       	dec	r20
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <main+0x64>
  ec:	80 fd       	sbrc	r24, 0
  ee:	0a c0       	rjmp	.+20     	; 0x104 <main+0x84>
  f0:	85 b3       	in	r24, 0x15	; 21
  f2:	47 b5       	in	r20, 0x27	; 39
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <main+0x7c>
  f8:	95 95       	asr	r25
  fa:	87 95       	ror	r24
  fc:	4a 95       	dec	r20
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <main+0x78>
 100:	80 ff       	sbrs	r24, 0
 102:	f6 cf       	rjmp	.-20     	; 0xf0 <main+0x70>
			
				{
			
					flag_high +=1;  
			
					TCNT0 = 0x00; //Resets our counter to zero
 104:	16 bc       	out	0x26, r1	; 38
			
					TIFR0 = 0x01; // Sets our Interrupt register to 1
 106:	55 bb       	out	0x15, r21	; 21
 108:	cc cf       	rjmp	.-104    	; 0xa2 <main+0x22>
		}
		else // Loop used for keeping/turning the LED off
		
		{
		
			PORTB = 0x00;//Sets the output of Port B to low
 10a:	15 b8       	out	0x05, r1	; 5
		
			while (flag_low<2)// How long we will be looping for to keep the LED off
		
			{
		
				if (TIFR0 & (1<<OCR0B)) // Inner loop that cycles until our flag_low hits desired value
 10c:	85 b3       	in	r24, 0x15	; 21
 10e:	48 b5       	in	r20, 0x28	; 40
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <main+0x98>
 114:	95 95       	asr	r25
 116:	87 95       	ror	r24
 118:	4a 95       	dec	r20
 11a:	e2 f7       	brpl	.-8      	; 0x114 <main+0x94>
 11c:	80 fd       	sbrc	r24, 0
 11e:	0a c0       	rjmp	.+20     	; 0x134 <main+0xb4>
 120:	85 b3       	in	r24, 0x15	; 21
 122:	48 b5       	in	r20, 0x28	; 40
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <main+0xac>
 128:	95 95       	asr	r25
 12a:	87 95       	ror	r24
 12c:	4a 95       	dec	r20
 12e:	e2 f7       	brpl	.-8      	; 0x128 <main+0xa8>
 130:	80 ff       	sbrs	r24, 0
 132:	f6 cf       	rjmp	.-20     	; 0x120 <main+0xa0>
		
				{
		
					TCNT0 = 0x00;//Resets our counter to zero
 134:	16 bc       	out	0x26, r1	; 38
		
					flag_low += 1;// Increments our off counter by 1
		
					TIFR0 = 0x0;// Resets interrupt flag to zero
 136:	15 ba       	out	0x15, r1	; 21
		
			while (flag_low<2)// How long we will be looping for to keep the LED off
		
			{
		
				if (TIFR0 & (1<<OCR0B)) // Inner loop that cycles until our flag_low hits desired value
 138:	85 b3       	in	r24, 0x15	; 21
 13a:	48 b5       	in	r20, 0x28	; 40
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <main+0xc4>
 140:	95 95       	asr	r25
 142:	87 95       	ror	r24
 144:	4a 95       	dec	r20
 146:	e2 f7       	brpl	.-8      	; 0x140 <main+0xc0>
 148:	80 fd       	sbrc	r24, 0
 14a:	0a c0       	rjmp	.+20     	; 0x160 <main+0xe0>
 14c:	85 b3       	in	r24, 0x15	; 21
 14e:	48 b5       	in	r20, 0x28	; 40
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <main+0xd8>
 154:	95 95       	asr	r25
 156:	87 95       	ror	r24
 158:	4a 95       	dec	r20
 15a:	e2 f7       	brpl	.-8      	; 0x154 <main+0xd4>
 15c:	80 ff       	sbrs	r24, 0
 15e:	f6 cf       	rjmp	.-20     	; 0x14c <main+0xcc>
		
				{
		
					TCNT0 = 0x00;//Resets our counter to zero
 160:	16 bc       	out	0x26, r1	; 38
		
					flag_low += 1;// Increments our off counter by 1
		
					TIFR0 = 0x0;// Resets interrupt flag to zero
 162:	15 ba       	out	0x15, r1	; 21
 164:	9e cf       	rjmp	.-196    	; 0xa2 <main+0x22>

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
