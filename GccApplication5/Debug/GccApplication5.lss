
GccApplication5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000120  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a2  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061f  00000000  00000000  000008ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000250  00000000  00000000  00000ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000005c  00000000  00000000  00001120  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036f  00000000  00000000  0000117c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a1  00000000  00000000  000014eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000158c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__vector_14>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

#include <avr/io.h>
#include <avr/interrupt.h>
int main(void)
{
	DDRB = _BV(PINB2);//We are setting Pin2 as output
  80:	94 e0       	ldi	r25, 0x04	; 4
  82:	94 b9       	out	0x04, r25	; 4
	TCCR0A = (1<<COM0B1)|(1<<WGM01); //Clear on Compare Match
  84:	82 e2       	ldi	r24, 0x22	; 34
  86:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02)|(1 << CS00); //Setting Pre-scaler to 1024 and turning on CTC mode
  88:	85 b5       	in	r24, 0x25	; 37
  8a:	85 60       	ori	r24, 0x05	; 5
  8c:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1 << OCIE0B);// Timer/Counter-Interrupt mask register turned on
  8e:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	OCR0B = 0xFF; //Number we will be comparing to
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	88 bd       	out	0x28, r24	; 40
	sei(); 	//Turns on Interrupts
  96:	78 94       	sei
  98:	ff cf       	rjmp	.-2      	; 0x98 <main+0x18>

0000009a <__vector_14>:
	while(1)
	{
	}
}
ISR (TIMER0_COMPA_vect)//Saves us the trouble of turning the LED off after our checks, 
{
  9a:	1f 92       	push	r1
  9c:	0f 92       	push	r0
  9e:	0f b6       	in	r0, 0x3f	; 63
  a0:	0f 92       	push	r0
  a2:	11 24       	eor	r1, r1
  a4:	2f 93       	push	r18
  a6:	3f 93       	push	r19
  a8:	4f 93       	push	r20
  aa:	5f 93       	push	r21
  ac:	8f 93       	push	r24
  ae:	9f 93       	push	r25
	int interrupt_counter = 0;// Sets variable for counting interrupts and initializes to zero
	if(PINC & _BV(PINC2))//Upon button activation preform the following
  b0:	32 9b       	sbis	0x06, 2	; 6
  b2:	29 c0       	rjmp	.+82     	; 0x106 <__vector_14+0x6c>
	{
		PORTB ^= (1<<2); //Turn on PINB 2 for output
  b4:	95 b1       	in	r25, 0x05	; 5
  b6:	84 e0       	ldi	r24, 0x04	; 4
  b8:	89 27       	eor	r24, r25
  ba:	85 b9       	out	0x05, r24	; 5
		interrupt_counter = 0;// Set interrupt counter to zero
  bc:	40 e0       	ldi	r20, 0x00	; 0
  be:	50 e0       	ldi	r21, 0x00	; 0
		{
			if (TIFR0 & (1 << OCR0B))// Loop condition checking for interrupt flag, and value Compare register
			{
				interrupt_counter +=1;// Increments our interrupt counter
				
				TIFR0 = 0x01;// Resets flag to 1
  c0:	31 e0       	ldi	r19, 0x01	; 1
  c2:	15 c0       	rjmp	.+42     	; 0xee <__vector_14+0x54>
	{
		PORTB ^= (1<<2); //Turn on PINB 2 for output
		interrupt_counter = 0;// Set interrupt counter to zero
		while(interrupt_counter < 49 ) // Loop as long as interrupt counter is less than desired value
		{
			if (TIFR0 & (1 << OCR0B))// Loop condition checking for interrupt flag, and value Compare register
  c4:	85 b3       	in	r24, 0x15	; 21
  c6:	28 b5       	in	r18, 0x28	; 40
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__vector_14+0x36>
  cc:	95 95       	asr	r25
  ce:	87 95       	ror	r24
  d0:	2a 95       	dec	r18
  d2:	e2 f7       	brpl	.-8      	; 0xcc <__vector_14+0x32>
  d4:	80 fd       	sbrc	r24, 0
  d6:	04 c0       	rjmp	.+8      	; 0xe0 <__vector_14+0x46>
	int interrupt_counter = 0;// Sets variable for counting interrupts and initializes to zero
	if(PINC & _BV(PINC2))//Upon button activation preform the following
	{
		PORTB ^= (1<<2); //Turn on PINB 2 for output
		interrupt_counter = 0;// Set interrupt counter to zero
		while(interrupt_counter < 49 ) // Loop as long as interrupt counter is less than desired value
  d8:	41 33       	cpi	r20, 0x31	; 49
  da:	51 05       	cpc	r21, r1
  dc:	9c f3       	brlt	.-26     	; 0xc4 <__vector_14+0x2a>
  de:	12 c0       	rjmp	.+36     	; 0x104 <__vector_14+0x6a>
		{
			if (TIFR0 & (1 << OCR0B))// Loop condition checking for interrupt flag, and value Compare register
			{
				interrupt_counter +=1;// Increments our interrupt counter
  e0:	4f 5f       	subi	r20, 0xFF	; 255
  e2:	5f 4f       	sbci	r21, 0xFF	; 255
				
				TIFR0 = 0x01;// Resets flag to 1
  e4:	35 bb       	out	0x15, r19	; 21
				
				TCNT0 = 0x00;//Resets our clock to zero
  e6:	16 bc       	out	0x26, r1	; 38
	int interrupt_counter = 0;// Sets variable for counting interrupts and initializes to zero
	if(PINC & _BV(PINC2))//Upon button activation preform the following
	{
		PORTB ^= (1<<2); //Turn on PINB 2 for output
		interrupt_counter = 0;// Set interrupt counter to zero
		while(interrupt_counter < 49 ) // Loop as long as interrupt counter is less than desired value
  e8:	41 33       	cpi	r20, 0x31	; 49
  ea:	51 05       	cpc	r21, r1
  ec:	59 f0       	breq	.+22     	; 0x104 <__vector_14+0x6a>
		{
			if (TIFR0 & (1 << OCR0B))// Loop condition checking for interrupt flag, and value Compare register
  ee:	85 b3       	in	r24, 0x15	; 21
  f0:	28 b5       	in	r18, 0x28	; 40
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <__vector_14+0x60>
  f6:	95 95       	asr	r25
  f8:	87 95       	ror	r24
  fa:	2a 95       	dec	r18
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <__vector_14+0x5c>
  fe:	80 ff       	sbrs	r24, 0
 100:	e1 cf       	rjmp	.-62     	; 0xc4 <__vector_14+0x2a>
 102:	ee cf       	rjmp	.-36     	; 0xe0 <__vector_14+0x46>
				
				TCNT0 = 0x00;//Resets our clock to zero
		}

	}
	PORTB = 0x00; // After desired time period turn LED off again as long as button is not activated
 104:	15 b8       	out	0x05, r1	; 5
	
	}

	return 0;
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	5f 91       	pop	r21
 10c:	4f 91       	pop	r20
 10e:	3f 91       	pop	r19
 110:	2f 91       	pop	r18
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
