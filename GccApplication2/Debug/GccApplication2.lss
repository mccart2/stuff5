
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068c  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023a  00000000  00000000  00000e63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000363  00000000  00000000  000010c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000030  00000000  00000000  00001427  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001457  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

int main (void)

{
	
	DDRB = 0xFF; //All ports on Port B as output
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4
	
	int interrupt_counter = 0; // Sets variable for counting interrupts and initializes to zero

	TCCR0A = (1<<COM0B1); //Clear on Compare Match
  84:	80 e2       	ldi	r24, 0x20	; 32
  86:	84 bd       	out	0x24, r24	; 36

	TCCR0B = (1<<CS02) | (1<<CS00);//Setting Pre-scaler to 1024
  88:	85 e0       	ldi	r24, 0x05	; 5
  8a:	85 bd       	out	0x25, r24	; 37

	TIMSK0 = (1 << OCIE0B);// Timer/Counter-Interrupt mask register turned on
  8c:	84 e0       	ldi	r24, 0x04	; 4
  8e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
		if(PINC & _BV(PINC2)) //Upon button activation preform the following
	
		{
	
			PORTB = _BV(PINB2); //Turn on PINB 2 for output
  92:	64 e0       	ldi	r22, 0x04	; 4
		
				{
		
					interrupt_counter +=1;// Increments our interrupt counter
					
					TIFR0 = 0x01;// Resets flag to 1
  94:	31 e0       	ldi	r19, 0x01	; 1

	while (1) // Out main repeating loop

	{
	
		if(PINC & _BV(PINC2)) //Upon button activation preform the following
  96:	32 9b       	sbis	0x06, 2	; 6
  98:	24 c0       	rjmp	.+72     	; 0xe2 <main+0x62>
	
		{
	
			PORTB = _BV(PINB2); //Turn on PINB 2 for output
  9a:	65 b9       	out	0x05, r22	; 5
	
			interrupt_counter = 0; // Set interrupt counter to zero
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	50 e0       	ldi	r21, 0x00	; 0
  a0:	15 c0       	rjmp	.+42     	; 0xcc <main+0x4c>
		
			while(interrupt_counter < 50 )// Loop while interrupt counter is lesss than desired value
	
			{
		
				if (TIFR0 & (1 << OCR0B))// Loop condition checking for interrupt flag, and value Compare register
  a2:	85 b3       	in	r24, 0x15	; 21
  a4:	28 b5       	in	r18, 0x28	; 40
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	02 c0       	rjmp	.+4      	; 0xae <main+0x2e>
  aa:	95 95       	asr	r25
  ac:	87 95       	ror	r24
  ae:	2a 95       	dec	r18
  b0:	e2 f7       	brpl	.-8      	; 0xaa <main+0x2a>
  b2:	80 fd       	sbrc	r24, 0
  b4:	04 c0       	rjmp	.+8      	; 0xbe <main+0x3e>
	
			PORTB = _BV(PINB2); //Turn on PINB 2 for output
	
			interrupt_counter = 0; // Set interrupt counter to zero
		
			while(interrupt_counter < 50 )// Loop while interrupt counter is lesss than desired value
  b6:	42 33       	cpi	r20, 0x32	; 50
  b8:	51 05       	cpc	r21, r1
  ba:	9c f3       	brlt	.-26     	; 0xa2 <main+0x22>
  bc:	12 c0       	rjmp	.+36     	; 0xe2 <main+0x62>
		
				if (TIFR0 & (1 << OCR0B))// Loop condition checking for interrupt flag, and value Compare register
		
				{
		
					interrupt_counter +=1;// Increments our interrupt counter
  be:	4f 5f       	subi	r20, 0xFF	; 255
  c0:	5f 4f       	sbci	r21, 0xFF	; 255
					
					TIFR0 = 0x01;// Resets flag to 1
  c2:	35 bb       	out	0x15, r19	; 21
					
					TCNT0 = 0x00;//Resets our clock to zero
  c4:	16 bc       	out	0x26, r1	; 38
	
			PORTB = _BV(PINB2); //Turn on PINB 2 for output
	
			interrupt_counter = 0; // Set interrupt counter to zero
		
			while(interrupt_counter < 50 )// Loop while interrupt counter is lesss than desired value
  c6:	42 33       	cpi	r20, 0x32	; 50
  c8:	51 05       	cpc	r21, r1
  ca:	59 f0       	breq	.+22     	; 0xe2 <main+0x62>
	
			{
		
				if (TIFR0 & (1 << OCR0B))// Loop condition checking for interrupt flag, and value Compare register
  cc:	85 b3       	in	r24, 0x15	; 21
  ce:	28 b5       	in	r18, 0x28	; 40
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <main+0x58>
  d4:	95 95       	asr	r25
  d6:	87 95       	ror	r24
  d8:	2a 95       	dec	r18
  da:	e2 f7       	brpl	.-8      	; 0xd4 <main+0x54>
  dc:	80 ff       	sbrs	r24, 0
  de:	e1 cf       	rjmp	.-62     	; 0xa2 <main+0x22>
  e0:	ee cf       	rjmp	.-36     	; 0xbe <main+0x3e>
	
			}

		}
	
		PORTB = 0x00;// After desired time period turn LED off again as long as button is not activated
  e2:	15 b8       	out	0x05, r1	; 5

	}
  e4:	d8 cf       	rjmp	.-80     	; 0x96 <main+0x16>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
